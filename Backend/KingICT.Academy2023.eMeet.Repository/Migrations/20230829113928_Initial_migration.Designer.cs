// <auto-generated />
using System;
using KingICT.Academy2023.eMeet.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KingICT.Academy2023.eMeet.Repository.Migrations
{
    [DbContext(typeof(EMeetContext))]
    [Migration("20230829113928_Initial_migration")]
    partial class Initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAddress"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdAddress");

                    b.HasIndex("CityId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            IdAddress = 1,
                            CityId = 1,
                            HouseNumber = "10",
                            StreetName = "Buzinski prilaz",
                            ZipCode = "10000"
                        },
                        new
                        {
                            IdAddress = 2,
                            CityId = 2,
                            HouseNumber = "14 (7.kat)",
                            StreetName = "Ulica Kralja Zvonimira",
                            ZipCode = "5000"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCity"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCity");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            IdCity = 1,
                            CountryId = 1,
                            Name = "Zagreb"
                        },
                        new
                        {
                            IdCity = 2,
                            CountryId = 1,
                            Name = "Split"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCountry");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            IdCountry = 1,
                            Name = "Hrvatska"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFeedback"));

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("IdFeedback");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Feedback", (string)null);

                    b.HasData(
                        new
                        {
                            IdFeedback = 1,
                            Comment = "Odlicna radionica, preporucam pogledati!",
                            Rating = 5,
                            UserId = 1,
                            WorkshopId = 1
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Picture", b =>
                {
                    b.Property<int>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPicture"));

                    b.Property<int>("Preference")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPicture");

                    b.ToTable("Picture", (string)null);

                    b.HasData(
                        new
                        {
                            IdPicture = 1,
                            Preference = 1,
                            Url = "https://i.postimg.cc/y6bRFcqF/Ba1.png"
                        },
                        new
                        {
                            IdPicture = 2,
                            Preference = 1,
                            Url = "https://i.postimg.cc/Pf1xqRbv/Ba2.png"
                        },
                        new
                        {
                            IdPicture = 3,
                            Preference = 1,
                            Url = "https://i.postimg.cc/g0mLYKRP/Ba3.png"
                        },
                        new
                        {
                            IdPicture = 4,
                            Preference = 2,
                            Url = "https://i.postimg.cc/9Mf49FJ8/Dev1.png"
                        },
                        new
                        {
                            IdPicture = 5,
                            Preference = 2,
                            Url = "https://i.postimg.cc/pLNnSvLr/Dev2.png"
                        },
                        new
                        {
                            IdPicture = 6,
                            Preference = 2,
                            Url = "https://i.postimg.cc/xd5JqbyN/Dev3.png"
                        },
                        new
                        {
                            IdPicture = 7,
                            Preference = 3,
                            Url = "https://i.postimg.cc/2jMqqYvG/Qa1.png"
                        },
                        new
                        {
                            IdPicture = 8,
                            Preference = 3,
                            Url = "https://i.postimg.cc/yYBN3ynQ/Qa2.png"
                        },
                        new
                        {
                            IdPicture = 9,
                            Preference = 3,
                            Url = "https://i.postimg.cc/gjXnMt93/Qa3.png"
                        },
                        new
                        {
                            IdPicture = 10,
                            Preference = 4,
                            Url = "https://i.postimg.cc/52qjkFrK/King1.png"
                        },
                        new
                        {
                            IdPicture = 11,
                            Preference = 4,
                            Url = "https://i.postimg.cc/DwqbkNSg/King2.png"
                        },
                        new
                        {
                            IdPicture = 12,
                            Preference = 4,
                            Url = "https://i.postimg.cc/pXjmzSJH/King3.png"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Preference", b =>
                {
                    b.Property<int>("IdPreference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPreference"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPreference");

                    b.ToTable("Preference", (string)null);

                    b.HasData(
                        new
                        {
                            IdPreference = 1,
                            Name = "BA"
                        },
                        new
                        {
                            IdPreference = 2,
                            Name = "DEV"
                        },
                        new
                        {
                            IdPreference = 3,
                            Name = "QA"
                        },
                        new
                        {
                            IdPreference = 4,
                            Name = "Interno"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Room", b =>
                {
                    b.Property<int>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoom"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRoom");

                    b.HasIndex("CityId");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            IdRoom = 1,
                            CityId = 1,
                            Name = "Yamato"
                        },
                        new
                        {
                            IdRoom = 2,
                            CityId = 1,
                            Name = "Ragusa"
                        },
                        new
                        {
                            IdRoom = 3,
                            CityId = 1,
                            Name = "Gradec"
                        },
                        new
                        {
                            IdRoom = 4,
                            CityId = 1,
                            Name = "Serenity"
                        },
                        new
                        {
                            IdRoom = 5,
                            CityId = 1,
                            Name = "Spalatos"
                        },
                        new
                        {
                            IdRoom = 6,
                            CityId = 2,
                            Name = "Riva"
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PictureURL")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RegisterToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.HasKey("IdUser");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            CreatedAt = new DateTime(2023, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "marijeta@gmail.com",
                            FirstName = "Marijeta",
                            IsVerified = true,
                            LastName = "Miletić",
                            Password = "ABkmjOu/a3s0CRq2l8EkeBdD8A4IV+S0++qXrbYFMZ+9uvKIGTo9XVH7ur8TiAubAw==",
                            PhoneNumber = "1234567890",
                            Role = (byte)3
                        },
                        new
                        {
                            IdUser = 2,
                            CreatedAt = new DateTime(2023, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Priznati stručnjak u području informacijskih tehnologija s naglaskom na .NET tehnologijama. S više od desetljeća iskustva, predaje na nekoliko uglednih fakulteta i posjeduje certifikat za .NET. Osim akademske karijere, Luka je zaposlen u tvrtki King ICT već četiri godine. Tu je odigrao ključnu ulogu u mnogim projektima, od razvoja softverskih rješenja do vođenja timova. Njegova stručnost, fleksibilnost i sposobnost rješavanja kompleksnih problema čine ga izuzetno cijenjenim u industriji. Uz sve to, njegova pristupačnost i pedagoške vještine doprinose njegovoj popularnosti među studentima i kolegama. Luka je također aktivan u zajednici, gdje redovito dijeli svoje znanje kroz radionice i webinare. Ova kombinacija akademskih i profesionalnih postignuća čini ga jednim od vodećih stručnjaka u svom polju.",
                            Email = "luka@gmail.com",
                            FirstName = "Luka",
                            IsVerified = true,
                            LastName = "Lukić",
                            Password = "ABkmjOu/a3s0CRq2l8EkeBdD8A4IV+S0++qXrbYFMZ+9uvKIGTo9XVH7ur8TiAubAw==",
                            PhoneNumber = "09862166428",
                            PictureURL = "https://d3but52g8hjy3q.cloudfront.net/blog/wp-content/uploads/2020/02/videos-teachers-768x432.jpg",
                            Role = (byte)2
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.UserPreference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreference", (string)null);

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.UserWorkshop", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<byte>("AttendanceType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "WorkshopId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("UserWorkshop", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            WorkshopId = 1,
                            AttendanceType = (byte)1,
                            IsHost = true
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Workshop", b =>
                {
                    b.Property<int>("IdWorkshop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWorkshop"));

                    b.Property<string>("AccessLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("EventType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAttendeesOffline")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendeesOnline")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("IdWorkshop");

                    b.HasIndex("AddressId");

                    b.HasIndex("PictureId");

                    b.HasIndex("RoomId");

                    b.ToTable("Workshop", (string)null);

                    b.HasData(
                        new
                        {
                            IdWorkshop = 1,
                            AccessLink = "https://www.udemy.com/topic/python/",
                            AddressId = 1,
                            Availability = false,
                            Description = "U ovom predavanju naučite sve osnove o Python programskom jeziku.",
                            EndDateTime = new DateTime(2023, 9, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = (byte)1,
                            IsCancelled = false,
                            MaxAttendeesOffline = 30,
                            MaxAttendeesOnline = 15,
                            Name = "Uvod u Python",
                            PictureId = 2,
                            RoomId = 1,
                            StartDateTime = new DateTime(2023, 9, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdWorkshop = 2,
                            AccessLink = "https://www.udemy.com/topic/data-science/",
                            AddressId = 2,
                            Availability = false,
                            Description = "Ova radionica zaranja duboko u teme znanosti o podacima, uključujući strojno učenje i umjetnu inteligenciju",
                            EndDateTime = new DateTime(2023, 10, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = (byte)2,
                            IsCancelled = false,
                            MaxAttendeesOffline = 25,
                            MaxAttendeesOnline = 30,
                            Name = "Napredne baze podataka",
                            PictureId = 4,
                            RoomId = 2,
                            StartDateTime = new DateTime(2023, 10, 15, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.WorkshopPreference", b =>
                {
                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.HasKey("WorkshopId", "PreferenceId");

                    b.HasIndex("PreferenceId");

                    b.ToTable("WorkshopPreference", (string)null);

                    b.HasData(
                        new
                        {
                            WorkshopId = 1,
                            PreferenceId = 1
                        },
                        new
                        {
                            WorkshopId = 2,
                            PreferenceId = 2
                        });
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Address", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.City", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Feedback", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Workshop", "Workshop")
                        .WithMany("Feedbacks")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Room", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.City", "City")
                        .WithMany("Rooms")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.UserPreference", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Preference", "Preference")
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Preference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.UserWorkshop", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.User", "User")
                        .WithMany("UserWorkshops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Workshop", "Workshop")
                        .WithMany("UserWorkshops")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Workshop", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Address", "Address")
                        .WithMany("Workshops")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Picture", "Picture")
                        .WithMany("Workshops")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Room", "Room")
                        .WithMany("Workshops")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Picture");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.WorkshopPreference", b =>
                {
                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Preference", "Preference")
                        .WithMany("WorkshopPreferences")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KingICT.Academy2023.eMeet.Models.Models.Workshop", "Workshop")
                        .WithMany("WorkshopPreferences")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Preference");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Address", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Picture", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Preference", b =>
                {
                    b.Navigation("WorkshopPreferences");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Room", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("UserWorkshops");
                });

            modelBuilder.Entity("KingICT.Academy2023.eMeet.Models.Models.Workshop", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("UserWorkshops");

                    b.Navigation("WorkshopPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
